"Chao Wang's personal vim configurations.
"Repo: https://github.com/hit9/dotfiles
"Feel free to use for any purpose, but try it on your own risk.
"-----------  Vim Makes World Better -------------

"Vundle Plugins ------------------------------ {
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

"Use https:// as default protocol for vundle's git clone.
let g:vundle_default_git_proto="https"

Plugin 'VundleVim/Vundle.vim'
"Colorschemes.
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'joshdick/onedark.vim'
Plugin 'jacoborus/tender.vim'
Plugin 'challenger-deep-theme/vim', { 'name': 'challenger-deep' }
Plugin 'drewtempelmeyer/palenight.vim'

"StatusBar.
Plugin 'vim-airline/vim-airline' "Status/tabline for vim
Plugin 'vim-airline/vim-airline-themes'
" Plugin 'bling/vim-bufferline' "Super simple vim plugin to show the list of buffers in the command bar.
"Startup Display.
Plugin 'mhinz/vim-startify' "Brings a beautiful and convenient startup buffer.
"File Explorer.
Plugin 'scrooloose/nerdtree' "Best file explore window plugin..
Plugin 'Xuyuanp/nerdtree-git-plugin' "A plugin of NERDTree showing git status flags.
"Search In Buffer.
Plugin 'junegunn/vim-slash' "Automatically search clear highlight & Improved star-search.
Plugin 'bronson/vim-visual-star-search' "Start a * or # search for a visual selection.
"Search Cross files/buffers;
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
"Range/Pattern/Substitue/Replace.
Plugin 'markonm/traces.vim' "Range, pattern and substitute preview. :substite :smagic :snomagic
"Completeion
Plugin 'Valloric/YouCompleteMe' "Autocomplete plugin (Go/Python/Js etc.)
"Visualization Enchance.
Plugin 'Yggdroot/indentLine' "Visualize us indent levels.
Plugin 'hit9/ShowMotion'  "Highlight `w/e/b/B` etc. motions to hint user where is going to jump to next. Forked from boucherm/ShowMotion.
Plugin 'mhinz/vim-signify' "Show diff signs for file changes under git/hg/svn control.
Plugin 'RRethy/vim-illuminate' " Vim plugin for selectively illuminating other uses of the current word under the cursor.
"Fast Movement, Motions.
Plugin 'jayflo/vim-skip' "Fast move in current line via binary-search way. Type s or S to try.
Plugin 'unblevable/quick-scope' "Realtime highlight on `f` motions and f<char> to move on.
"Plugin 'tmhedberg/matchit' "Extended % matching for HTML, LaTeX, Lua, Vim, XML, Shell and many other languages.
Plugin 'kshenoy/vim-signature' "Plugin to toggle, display and navigate marks.
                               "mx to (un)mark
                               "m- to delete mark.
                               "m<Space> to delete all marks for this buffer.
                               "'<mark> to seek to line head of mark.
                               "m/ to show all marks in a split buffer.
"Plugin 'wellle/targets.vim' " Provides additional text objects
"Plugin 'machakann/vim-sandwich'
Plugin 'kien/rainbow_parentheses.vim' "Colorful pairs ()[]{}..
"Fast Editing.
Plugin 'jiangmiao/auto-pairs' "Auto close pairs ((),{},[]).
Plugin 'tpope/vim-commentary' "Type '\\' aka <Leader><Leader> to quick (un)comment line(s).
Plugin 'terryma/vim-multiple-cursors' "Brings sublime text's multiple cursors to vim. Press Ctrl-N to try.
"Linting/Fixing.
Plugin 'w0rp/ale' "Asynchronous linting/fixing for Vim
"Snips.
" Plugin 'SirVer/ultisnips'
" Plugin 'honza/vim-snippets'
"Git
" Plugin 'tpope/vim-fugitive' "Git plugin for vim. I use it not a lot.
"Language: Javascript
Plugin 'pangloss/vim-javascript' "Js syntax plugin.
"Language/framework: Vue
" Plugin 'posva/vim-vue' "Vue syntax plugin, I don't write frontend alot.
"Language: Python
Plugin 'vim-python/python-syntax' "Python syntax.
"Language: C/C++
Plugin 'octol/vim-cpp-enhanced-highlight'
"Language: Go
Plugin 'fatih/vim-go' "Golang all-in-one plugin, go-to-definition,highlight,autoformat.. support.
"Language: Rust
Plugin 'rust-lang/rust.vim' "Rust syntax.
Plugin 'racer-rust/vim-racer'
"Language: Markdown
Plugin 'plasticboy/vim-markdown'
"Language: Misc
Plugin 'elzr/vim-json'
Plugin 'dag/vim-fish'
Plugin 'cespare/vim-toml'
Plugin 'stephpy/vim-yaml'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'uber/prototool', { 'rtp':'vim/prototool' }
Plugin 'yogorobot/bitproto', {'rtp': 'editors/vim/'}

call vundle#end() " required
"Vundle  -------------------------------- }

"Basic ------------------------------------------------ {

filetype plugin indent on "This should be after bundles.

"Normal settings.
set shell=/bin/sh  "Make vim to use `/bin/sh` instead of `$SHELL`.
set noeb "Disable bells.
set re=1 "Force vim to use a older version of regex engine and it is actually FASTER.
set ttyfast "Indicates a fast terminal connection. (see :help ttyfast).
set lazyredraw "Same, faster vim.

"Normal :: Mouse.
set mouse=a "Enable mouse.
set selection=exclusive "Mouse can only selects the block where ths cursor is on.
set selectmode=mouse,key

set mousehide "Hide mouse cursor on keyboard typing.
set mousemodel=popup "Right mouse button pops up a menu.

"Syntax
syntax enable "Enable syntax.
set synmaxcol=180 "Don't perform highlight on lines that are longer than 800 chars.
syntax sync minlines=256

"Display :: Window
set number  "Show line numbers.
"set relativenumber "Show relative line numbers.
set go= "Disable gvim's gui menu. (But I never use gui version).
set term=screen-256color "I use screen-256color.
set shortmess=atI "Disable the short message on vim start.
set noshowcmd "Don't show command in the last line of screeen.
set showmode "If in Insert, Replace or Visual mode put a message on the last line.
set nowrap "Lines longer than the width of window will wrap and displaying continues on the next line.

"Display :: Statusbar
set laststatus=2 "Always show status line on the last window.
set ruler "Show line and column number of where cursor is.

"Display :: Terminal title
set title "Makes terminal title is set by vim.
set titleold= "Restore old title after leaving vim.

"Display :: Scroll/Cursor
"https://stackoverflow.com/posts/1276428/revisions
"Cursor which always stays in the middle of screen is cool.
set scrolloff=9999

"Search/Replace
set gdefault ":s/<search-target>/<to-replace-with>/ is s///g by default
set hlsearch "Highlight search results.
set incsearch "Realtime search results showing.

"Editing.
set autoread "Auto updates current file if this file is updated by outer.
set hidden "Opening a new file when the current buffer has unsaved changes causes files to be hidden instead of closed.
set autochdir "Auto switch current working directory to current editing file's directory.

"Editing :: Encodings --- We all use utf8 please.
set encoding=utf-8
set fencs=utf-8 "Encoding that creating new files.
set termencoding=utf-8 "Encoding that output to terminal.
set fileencoding=utf-8 "Encoding that saving files.
set backspace=indent,eol,start "Backspace key, I just don't rely on it.

" Editing :: fold, by indent {{{
set nofoldenable
set foldmethod=indent
set foldcolumn=2
set foldlevel=0
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo  " Which commands trigger auto-unfold
set foldclose=all  "Close all folds (which level>foldlevel) automatically when cursor leaves.
"Enable fold for programming languages.
autocmd FileType c,go,python,javascript,bitproto,protobuf setlocal foldenable

"Editing :: Copy/Paste
set clipboard=unnamed "Tmux copy issue: https://github.com/tmux/tmux/issues/543#issuecomment-248980734

"Editing :: Match
set showmatch "When a bracket is inserted, briefly jump to the matching one.
set matchtime=1 "Tenths of a second to show the matching paren.

"Editing :: Completion.
set completeopt=longest,menu
set cpt=.,w,b

"Editing :: Indent And Tabs.
set autoindent "Autoindent  makes Cmd+V works wired, so when pasting something from clipboard into vim:
               ":set paste and then Cmd+V, and rollback paste settings via :set paste.
set cindent "C style indent.
set smartindent "http://vim.wikia.com/wiki/Indenting_source_code
set expandtab "Expand tabs into spaces, by default (Python user's must-have).
set tabstop=4 "Setting 1tab = 4 spaces.
set softtabstop=4 "Number of spaces that a <Tab> counts for while editing. :set paste makes softtabstop to 0 temply.
set shiftwidth=4 "Number of spaces to use for each step of (auto)indent.

set list "Show tabs via listchars below, and display end sign after endo fline.
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ "Chars that to display list.

"Tab settings for diferent language filetypes. (forked from humiaozuzu's dotfile.)
autocmd FileType text setlocal textwidth=79
autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79

"Color/Highlighting.
set t_Co=256 "Enable 256 color
set background=dark "Using dark. Hmm dark is sexy.

"Plugin Configuration :: vim-airline/vim-airline --------------- {
let g:airline_highlighting_cache = 1 "This will try to prevent some of the more expensive :hi calls in Vim,
                                     "A :AirlineRefresh will however clear the cache.
let g:airline_theme = 'peaksea'
let g:airline_powerline_fonts = 1
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#tabline#enabled = 1

"Plugin Configuration :: vim-airline/vim-airline --------------- }

"Colorscheme Configuration :: PaperColor ----------- {
let g:PaperColor_Theme_Options = {
    \   'theme': {
    \     'default.dark': {
    \        'transparent_background': 1
    \      }
    \   },
    \   'language': {
    \     'python': {
    \       'highlight_builtins' : 1
    \     },
    \     'cpp': {
    \       'highlight_standard_library': 1
    \     },
    \     'c': {
    \       'highlight_builtins' : 1
    \     }
    \   }
    \ }

colorscheme PaperColor "Set colorscheme after its setting applied.

"Colorscheme Configuration :: PaperColor ----------- }

"Color :: CursorLine/CursorColumn (Apply after colorscheme loaded)
set cursorline "Highlight current line.
hi CursorLine term=underline cterm=underline ctermbg=236 ctermfg=none
set cursorcolumn "Highlight current column. (Apply after colorscheme loaded)
hi CursorColumn term=none cterm=none ctermbg=240 ctermfg=none

" Color :: Normal and Visual mode.
hi Normal term=none ctermbg=none " Make vim be transparent in terminal.
hi Visual term=none cterm=bold ctermbg=238 ctermfg=none

" Color :: Folded
hi Folded cterm=bold term=bold ctermbg=236 ctermfg=248
hi FoldColumn cterm=bold term=bold ctermfg=248

"Basic ------------------------------------------------ }

"Plugin Configuration :: tpope/vim-commentary ----------------- {

"Type `\\` to toggle comments for current line or selected blocks.
xmap <Leader><Leader>  <Plug>Commentary
nmap <Leader><Leader>  <Plug>Commentary
omap <Leader><Leader>  <Plug>Commentary
nmap <Leader><Leader>  <Plug>CommentaryLine

"Plugin Configuration :: tpope/vim-commentary ----------------- }

"Plugin Configuration :: Valloric/YouCompleteMe ----------------------------- {
"
let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_confirm_extra_conf = 0
let g:ycm_python_binary_path = 'python'
let g:ycm_complete_in_comments = 1 "Enable completion in comments.
let g:ycm_collect_identifiers_from_comments_and_strings = 1 "Collect identifiers and strings inside comments.
let g:ycm_seed_identifiers_with_syntax = 1 "Language syntax keywords completion.

"Type 'gd' on normal mode to goto definition in c/cpp/py files.
au FileType go,python,c,javascript nmap gd :split\|YcmCompleter GoToDefinitionElseDeclaration<CR>

"Plugin Configuration :: Valloric/YouCompleteMe ----------------------------- }

"Plugin Configuration :: fzf --------------- {
"Map control-p to fzf ^_^
nmap <c-p> :FZF<CR>
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"Plugin Configuration :: fzf  ------------- }

"Plugin Configuration :: scrooloose/nerdtree --------- {
"Open nerdtree on buffer entered. And close it if it's the last window.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"nerdtree window's width.
let NERDTreeWinSize=35
"Show line number for nerdtree.
let NERDTreeShowLineNumbers=1
"Don't display these files:
let NERDTreeIgnore=['\.pyc$', '\.o$', '\~$', '__pycache__', '\.mypy_cache', '\.DS_Store',
    \ '^\.git$', '\.o$', '\.so$', '\.egg$', "\.pytest_cache", "\.swp$", "\.swo$", "\.swn$"]
" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1
" Show hidden files, too
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1

"User-defined custom command `:NT` to toggle nerdtree window

:command NT :NERDTreeToggle

"Plugin Configuration :: scrooloose/nerdtree --------- }

"Plugin Configuration :: Yggdroot/indentLine ------------------------- {
let g:indentLine_char = '|'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'
"Plugin Configuration :: Yggdroot/indentLine ------------------------- }

"Plugin Configuration :: pangloss/vim-javascript -------------- {
let javascript_enable_domhtmlcss = 1
let g:javascript_plugin_jsdoc = 1
"Plugin Configuration :: pangloss/vim-javascript -------------- }

"Plugin Configuration :: fatih/vim-go -------------------- {
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_def_mode = 'godef'
let g:go_def_mapping_enabled = 0  "I use custom gd map, that split a window.

"We remap gd for godef split window.
"au FileType go nnoremap gd :split\|GoDef<CR>

"Install current directiory as a package into GOPATH, for autocompletion of go
"code, since gocode don't know packages that not in GOPATH/pkg.
autocmd BufWrite *.go :call job_start('go install .')

"Plugin Configuration :: fatih/vim-go -------------------- }

"Plugin Configuration :: vim-python/python-syntax ---------------- {
let python_highlight_all = 1
"Plugin Configuration :: vim-python/python-syntax ----------------- }

"Plugin Configuration :: rust-lang/rust.vim && racer -------------------- {
let g:rustfmt_autosave = 1
let g:racer_cmd = '/Users/hit9/.cargo/bin/racer'
let $RUST_SRC_PATH='/Users/hit9/src/rust/src/'
"Plugin Configuration :: rust-lang/rust.vim && racer -------------------- }

"Plugin Configuration :: rust-lang/rust.vim && racer  -------------------- {
let g:startify_custom_header = 'startify#fortune#cowsay()'
"Plugin Configuration :: rust-lang/rust.vim && racer  -------------------- }

"Plugin Configuration :: vim-json --------------------- {
let g:vim_json_syntax_conceal = 0
"Plugin Configuration :: vim-json ----------------------------- }

"Plugin Configuration :: unblevable/quick-scope ------------- {
highlight QuickScopePrimary ctermfg=155 cterm=underline
highlight QuickScopeSecondary ctermfg=81 cterm=none
let g:qs_max_chars=180 "Max number of chars to highlight in one line.
let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
"Plugin Configuration :: unblevable/quick-scope ------------- }

"Plugin Configuration :: w0rp/ale -------------------------------- {
" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1
let g:ale_linters = {
    \   'javascript': ['standard'],
    \   'python': ['black', 'mypy', 'vulture'],
    \   'c': ['clang-format'],
    \   'cpp': ['clang-format'],
    \   'proto': ['prototool'],
\}
let g:ale_fixers_explicit = 1
let g:ale_fixers = {
    \   'javascript': ['standard'],
    \   'python': ['black'],
    \   'c': ['clang-format'],
    \   'cpp': ['clang-format'],
\}
let g:ale_fix_on_save = 1
let g:ale_python_vulture_options = '--min-confidence 80 --exclude "*pb2.py,*pb2_grpc.py,*.egg-info,dist/*,"'
"Plugin Configuration :: w0rp/ale -------------------------------- }

"Plugin Configuration :: junegunn/vim-slash ---------- {
if has('timers')
  " Blink 2 times with 50ms interval
  noremap <expr> <plug>(slash-after) slash#blink(2, 50)
endif
"Plugin Configuration :: junegunn/vim-slash ---------- }

"Plugin Configuration :: terryma/vim-multiple-cursors ------------------- {
"Bugs in terryma/vim-multiple-cursors, requires this setting. https://github.com/terryma/vim-multiple-cursors/issues/124
augroup MultipleCursorsSelectionFix
    autocmd User MultipleCursorsPre  if &selection ==# 'exclusive' | let g:multi_cursor_save_selection = &selection | set selection=inclusive | endif
    autocmd User MultipleCursorsPost if exists('g:multi_cursor_save_selection') | let &selection = g:multi_cursor_save_selection | unlet g:multi_cursor_save_selection | endif
augroup END
let g:multi_cursor_quit_keys='<Esc>,<C-c>'
highlight multiple_cursors_cursor term=none cterm=none ctermfg=none ctermbg=28
highlight multiple_cursors_visual term=none cterm=none ctermbg=22 ctermfg=none
"Plugin Configuration :: terryma/vim-multiple-cursors ------------------- {

"Plugin Configuration :: mhinz/vim-signify ----------------- {
highlight SignColumn ctermbg=NONE cterm=NONE guibg=NONE gui=NONE
"Plugin Configuration :: mhinz/vim-signify }

"Plugin Configuration :: kshenoy/vim-signature ------------------- {
highlight SignatureMarkText cterm=none ctermfg=155
let g:SignatureMarkTextHLDynamic=1
"Plugin Configuration :: kshenoy/vim-signature ---------------------- }

"Plugin Configuration :: t9md/vim-choosewin ---------------------- {
" nmap ww <Plug>(choosewin)
" let g:choosewin_overlay_enable = 1
"Plugin Configuration :: t9md/vim-choosewin ---------------------- }

"Plugin Configuration :: kien/rainbow_parentheses.vim  ---------------------- {
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"Plugin Configuration :: kien/rainbow_parentheses.vim  ---------------------- }

"Plugin Configuration :: RRethy/vim-illuminate ------------------ {
let g:Illuminate_delay = 30
highlight illuminatedWord cterm=underline gui=underline
"Plugin Configuration :: RRethy/vim-illuminate --------------- }

"Plugin Configuration :: hit9/ShowMotion --------------------- {

"highlight 168=pink.
highlight SM_SmallMotionGroup cterm=underline ctermfg=168
highlight SM_BigMotionGroup   cterm=underline ctermfg=168
highlight SM_CharSearchGroup  cterm=underline ctermfg=168

"Highlights both big and small motions
nmap w <Plug>(show-motion-both-w)
nmap W <Plug>(show-motion-both-W)
nmap b <Plug>(show-motion-both-b)
nmap B <Plug>(show-motion-both-B)
nmap e <Plug>(show-motion-both-e)
nmap E <Plug>(show-motion-both-E)

"Only highlights motions corresponding to the one you typed
nmap w <Plug>(show-motion-w)
nmap W <Plug>(show-motion-W)
nmap b <Plug>(show-motion-b)
nmap B <Plug>(show-motion-B)
nmap e <Plug>(show-motion-e)
nmap E <Plug>(show-motion-E)

"Show motion for chars:
nmap f <Plug>(show-motion-f)
nmap t <Plug>(show-motion-t)
nmap F <Plug>(show-motion-F)
nmap T <Plug>(show-motion-T)
nmap ; <Plug>(show-motion-;)
nmap , <Plug>(show-motion-,)

"Plugin Configuration :: hit9/ShowMotion --------------------- }

"Plugin Configuration :: plasticboy/vim-markdown ---------- {
let g:vim_markdown_conceal = 0
"Plugin Configuration :: plasticboy/vim-markdown ---------- }

"Custom :: WhiteSpaces Cleaning ----------------------------  {

"Highlight trailing whitespaces as red.
"http://vim.wikia.com/wiki/Highlight_unwanted_spaces.
highlight ExtraWhitespace ctermbg=red
match ExtraWhitespace /\s\+$/

"Clean trailing whitespaces on buffer's save.
"Command :WS is to clean trailing whitespaces.
:command WS :%s/\s\+$//e

"Auto clean whitespaces on buffer save for this files.
autocmd BufWrite *.c,*.h,*.go,*.py,*.js,*.html,*.md,.vimrc,*.ini,*.toml,*.markdown,*.yaml,*.proto,*.bitproto :WS

"Custom :: WhiteSpaces Cleaning ----------------------------  }

"Custom :: Window Switches ----------------------------  {
"Shortcut window switches, w+h/j/k/l
nmap w<up> <c-w><up>
nmap wk <c-w><up>
nmap w<left> <c-w><left>
nmap wh <c-w><left>
nmap w<right> <c-w><right>
nmap wl <c-w><right>
nmap w<down> <c-w><down>
nmap wj <c-w><down>
"Custom :: Window Switches ----------------------------  }

" Mappings to easily toggle fold levels
nmap z0 :set foldlevel=0<CR>
nmap z1 :set foldlevel=1<CR>
nmap z2 :set foldlevel=2<CR>
nmap z3 :set foldlevel=3<CR>
nmap z4 :set foldlevel=4<CR>
nmap z5 :set foldlevel=5<CR>
nmap z6 :set foldlevel=6<CR>
nmap z7 :set foldlevel=7<CR>
nmap z8 :set foldlevel=8<CR>
nmap z99 :set foldlevel=99<CR>
