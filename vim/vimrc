"Vundle
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"Use git:// as default protocol.
let g:vundle_default_git_proto="https"

Plugin 'VundleVim/Vundle.vim'
"Colorschemes
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'cocopon/iceberg.vim'
Plugin 'rakr/vim-one'
"Plugins
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'Valloric/YouCompleteMe'
Plugin 'jiangmiao/auto-pairs'
Plugin 'tpope/vim-commentary'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'mhinz/vim-startify'
"Git
Plugin 'tpope/vim-fugitive'
"Language: Javascript
Plugin 'JavaScript-Indent'
Plugin 'jelera/vim-javascript-syntax'
"Framework: Vue
Plugin 'posva/vim-vue'
"Language: Python
Plugin 'pep8'
Plugin 'python.vim--Vasiliev'
Plugin 'hynek/vim-python-pep8-indent'
"Language: C/C++
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'vim-scripts/a.vim'
Plugin 'rhysd/vim-clang-format'
"Language: Go
Plugin 'fatih/vim-go'
"Plugin 'dgryski/vim-godef'
"Language: Rust
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'
"Language: Markdown
Plugin 'jtratner/vim-flavored-markdown'
"Language: Misc
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'cespare/vim-toml'
Plugin 'elzr/vim-json'
Plugin 'dag/vim-fish'

call vundle#end() " required

"This should be after bundles.
filetype plugin indent on

syntax enable
se nu  "Show line numbers.
set shell=/bin/sh
"set term=xterm-256color
set term=screen-256color
set title "Terminal title is set by vim.
set go= "Disable gui menu
set t_Co=256 "Enable 256 color
set hidden
set ttyfast
syntax on
set showcmd
set showmode
set noeb "Disable bells.
"Auto updates current file if this file is updated by outer.
set autoread
"Disable the short message on vim start.
set shortmess=atI
"Auto switch current working directory to current editing file's directory.
set autochdir
"Don't perform highlight on lines that are longer than 800 chars.
set synmaxcol=800
set backspace=indent,eol,start
set gdefault
"Search
set hlsearch
set incsearch
"Encoding=utf8
set encoding=utf-8
"Encoding that creating new files.
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbkgb2312,cp936
"Encoding that output to terminal.
set termencoding=utf-8
"Encoding that saving files.
set fileencoding=utf-8

set nowrap

"Statusbar
set laststatus=2
set ruler

"Tmux copy issue
"https://github.com/tmux/tmux/issues/543#issuecomment-248980734
set clipboard=unnamed

"Hide gvim's toolbar.
set guioptions-=T
"Hide gvim's menubar.
set guioptions-=m
"Setting gvim's font.
" set guifont=Monaco:h14
set guifont=Inconsolata-g\ for\ Powerline:h14

"Auto indent.
set autoindent
"C style indent.
set cindent
"http://vim.wikia.com/wiki/Indenting_source_code
set smartindent

"Expand tabs into spaces, for python.
set expandtab
set tabstop=4 " 1tab = 4 spaces.
set softtabstop=4
set shiftwidth=4

"Show list.
set list
"Chars that to display list.
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮

"Set ident tabs by filetype (modified from humiaozuzu's dotfile).
autocmd FileType text setlocal textwidth=79
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType coffee,javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=79
autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79

"Enable mouse.
set mouse=a
set selection=exclusive
set selectmode=mouse,key
"Hide mouse cursor on keyboard typing.
set mousehide
set mousemodel=popup

" Enable fold, manually.
set foldenable
set foldmethod=manual
set foldlevel=3

"Highlight match.
set showmatch
set matchtime=1

"Completion.
set completeopt=longest,menu
set cpt=.,w,b

"Commentry, type `\\` to toggle comments.
xmap <Leader><Leader>  <Plug>Commentary
nmap <Leader><Leader>  <Plug>Commentary
omap <Leader><Leader>  <Plug>Commentary
nmap <Leader><Leader>  <Plug>CommentaryLine

"Airline
let g:airline_theme = 'luna'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

"YouCompleteMe
let g:ycm_key_list_select_completion = ['<Down>']

"Python highlights (python.vim)
let g:python_highlight_builtin_objs = 1
let g:python_highlight_builtin_funcs = 1
let g:python_highlight_exceptions = 1

"Colorscheme
let g:PaperColor_Theme_Options = {
    \   'theme': {
    \     'default.dark': {
    \        'transparent_background': 1
    \      }
    \   }
    \ }

set background=dark
"Make vim be transparent in terminal.
hi Normal ctermbg=none

if has("gui_macvim")
    colorscheme PaperColor
else
    colorscheme PaperColor
endif

"Highlight current line. I'am now using iterm's cursor line highlighting.
set cursorline
"Highlight current column.
set cursorcolumn

" Custom cursorline and cursorcolumn bg and fg colors.
if has("gui_macvim")
    hi CursorLine term=none gui=none guibg=#2d2d2d guifg=DarkCyan
    hi CursorColumn term=none gui=none guibg=#2d2d2d guifg=DarkCyan
else
    "CursorLine: use iterm cursorline bg color, term vim dosent support custom defined
    "color codes
    hi CursorLine term=underline cterm=underline ctermbg=none ctermfg=DarkGrey
    hi CursorColumn term=none cterm=none ctermbg=DarkGrey ctermfg=LightBlue
endif

"Highlight selected blocks on visual mode.
if has("gui_macvim")
    hi Visual gui=none guifg=White guibg=#04daf2
else
    hi Visual term=none cterm=none ctermfg=LightYellow ctermbg=DarkCyan
endif

"Open nerdtree on buffer entered. And close it if it's the last window.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"nerdtree window's width.
let NERDTreeWinSize = 35
"Show line number for nerdtree.
let NERDTreeShowLineNumbers=1
"Don't display these files:
let NERDTreeIgnore=['\.pyc$', '\.o$', '\~$', '__pycache__']

"pep8, ctrl-k short key.
"let g:pep8_map='<C-k>'

"------------------ YouCompleteMe
let g:ycm_confirm_extra_conf = 0
let g:ycm_python_binary_path = 'python'
let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/'
" let g:clang_format#style_options = {
"             \ 'BasedOnStyle': 'google',
"             \ 'IndentWidth': '4',
"             \ 'DerivePointerAlignment': 'false',
"             \ 'PointerAlignment': 'Right',
"             \ }
let g:clang_format#detect_style_file = 1
let g:clang_format#auto_format = 1

"----- indentLine
let g:indentLine_char = '|'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'

"--------------------  for pythonist, use vim-pep8-indent instead of pymode
let g:pymode_indent = 1  "currently use pymode's indent
let g:pymode_rope = 0
let g:pymode_lint_write = 1
let g:pymode_lint = 1

"------------------ For Js
let javascript_enable_domhtmlcss = 1
let g:javascript_plugin_jsdoc = 1

"-------------------- for golang users
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_def_mode = 'godef'
let g:go_def_mapping_enabled = 0

"We remap gd for godef split window.
au FileType go nnoremap gd :split\|GoDef<CR>
"Type 'gd' on normal mode to goto definition in c/cpp/py files.
au FileType python,c,javascript nmap gd :split\|YcmCompleter GoToDefinitionElseDeclaration<CR>

"Install current directiory as a package into GOPATH, for autocompletion of go
"code.
autocmd BufWrite *.go :call job_start('go install .')

"------------------- For rust users
let g:rustfmt_autosave = 1
let g:racer_cmd = '/Users/hit9/.cargo/bin/racer'
let $RUST_SRC_PATH='/Users/hit9/src/rust/src/'

" Vim-startify
let g:startify_custom_header = [
            \ '                         ███████████████████████████',
            \ '                         ███████▀▀▀░░░░░░░▀▀▀███████',
            \ '                         ████▀░░░░░░░░░░░░░░░░░▀████',
            \ '                         ███│░░░░░░░░░░░░░░░░░░░│███',
            \ '                         ██▌│░░░░░░░░░░░░░░░░░░░│▐██',
            \ '                         ██░└┐░░░░░░░░░░░░░░░░░┌┘░██',
            \ '                         ██░░└┐░░░░░░░░░░░░░░░┌┘░░██',
            \ '                         ██░░┌┘▄▄▄▄▄░░░░░▄▄▄▄▄└┐░░██',
            \ '                         ██▌░│██████▌░░░▐██████│░▐██',
            \ '                         ███░│▐███▀▀░░▄░░▀▀███▌│░███',
            \ '                         ██▀─┘░░░░░░░▐█▌░░░░░░░└─▀██',
            \ '                         ██▄░░░▄▄▄▓░░▀█▀░░▓▄▄▄░░░▄██',
            \ '                         ████▄─┘██▌░░░░░░░▐██└─▄████',
            \ '                         █████░░▐█─┬┬┬┬┬┬┬─█▌░░█████',
            \ '                         ████▌░░░▀┬┼┼┼┼┼┼┼┬▀░░░▐████',
            \ '                         █████▄░░░└┴┴┴┴┴┴┴┘░░░▄█████',
            \ '                         ███████▄░░░░░░░░░░░▄███████',
            \ '                         ██████████▄▄▄▄▄▄▄██████████',
            \ '                         ███████████████████████████',
            \ '',
            \ '                ╔══════════════════════════════════════════╗',
            \ '                ║             ⎋ Vim Rocks! ⎋               ║',
            \ '                ╚══════════════════════════════════════════╝'
            \ ]

"Shortcut window switches, w+h/j/k/l
noremap w<up> <c-w><up>
noremap wk <c-w><up>
noremap w<left> <c-w><left>
noremap wh <c-w><left>
noremap w<right> <c-w><right>
noremap wl <c-w><right>
noremap w<down> <c-w><down>
noremap wj <c-w><down>

"Map Ctrl-C and Ctrl-V to copy and paste.
map <C-c> "+y
map <C-v> "+p

"Shortcut command to toggle nerdtree window.
:command NT :NERDTreeToggle

"Highlight trailing whitespaces as red.
"http://vim.wikia.com/wiki/Highlight_unwanted_spaces.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
"Clean trailing whitespaces on buffer's save.
"Command :WS is to clean trailing whitespaces.
:command WS :%s/\s\+$//e
autocmd BufWrite *.c,*.h,*.go,*.py,*.js,*.html,*.md,.vimrc :WS
"autocmd BufWrite *.c,*.h,*.cc,*.hh :ClangFormat

"RefreshBuffer is a function to refresh current editing buffer.
function! RefreshBuffer(ch, msg)
  silent edit!
endfunction

"Call eslint --fix on buffer save, async
au BufWrite *.js :call job_start("eslint " . expand("%:p") . " --fix", {'exit_cb': 'RefreshBuffer'})
